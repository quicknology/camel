<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:cxf="http://camel.apache.org/schema/cxf" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd 
           http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd">

	<context:property-placeholder
		location="file:${karaf.home}/va_esb_proxy/config.properties, classpath:cms-context.properties" />

	<bean id="loggingOutInterceptor" class="org.apache.cxf.interceptor.LoggingOutInterceptor" />

	<bean id="loggingInInterceptor" class="org.apache.cxf.interceptor.LoggingInInterceptor" />

	<bean id="keystoreCallbackHandler" class="com.sms.dcp.KeystorePasswordCallback">
		<property name="users">
			<map>
				<!-- unfortunately this doesn't work for wss4j. It can't use bean ref 
					value is initialized in bean constructor as well. -->
				<!-- DDC keys -->
				<entry key="clientkey" value="keypassword" />
				<entry key="servercert" value="keypassword" />
				<!-- self generated test keys -->
				<entry key="myclientkey" value="ckpass" />
				<entry key="myservicekey" value="skpass" />
			</map>
		</property>
	</bean>

	<bean id="wss4jInInterceptor-ddc-service" class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
		<constructor-arg>
			<map>
				<entry key="action" value="${SECURITY_DDC_ACTION}" />
				<entry key="signaturePropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="decryptionPropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" />
				<entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />
				<!-- <entry key="passwordCallbackClass" value="com.sms.dcp.KeystorePasswordCallback" 
					/> -->
				<entry key="passwordCallbackRef" value-ref="keystoreCallbackHandler" />
			</map>
		</constructor-arg>
	</bean>
	<bean id="wss4jOutInterceptor-ddc-service" class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
		<constructor-arg>
			<map>
				<entry key="action" value="${SECURITY_DDC_ACTION}" />
				<entry key="user" value="${SECURITY_DDC_SIGNATURE_USER}" />
				<!-- <entry key="passwordCallbackClass" value="com.sms.dcp.KeystorePasswordCallback" 
					/> -->
				<entry key="passwordCallbackRef" value-ref="keystoreCallbackHandler" />

				<entry key="signaturePropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="signatureKeyIdentifier" value="DirectReference" />
				<entry key="signatureParts"
					value="{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp;{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body" />
				<!-- What algorithm does VBMS support? -->
				<entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />

				<entry key="encryptionPropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="encryptionUser" value="${SECURITY_DDC_EncryptionUser}" />
				<entry key="encryptionParts"
					value="{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body" />
				<entry key="encryptionSymAlgorithm" value="http://www.w3.org/2001/04/xmlenc#tripledes-cbc" />
				<entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" />
			</map>
		</constructor-arg>
	</bean>

	<bean id="wss4jInInterceptor-VBMS-client" class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
		<constructor-arg>
			<map>
				<entry key="action" value="${SECURITY_CLIENT_ACTION}" />
				<entry key="signaturePropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="decryptionPropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" />
				<entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />
				<!-- <entry key="passwordCallbackClass" value="com.sms.dcp.KeystorePasswordCallback" 
					/> -->
				<entry key="passwordCallbackRef" value-ref="keystoreCallbackHandler" />
			</map>
		</constructor-arg>
	</bean>

	<bean id="wss4jOutInterceptor-VBMS-client" class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
		<constructor-arg>
			<map>
				<entry key="action" value="${SECURITY_CLIENT_ACTION}" />
				<entry key="user" value="${SECURITY_CLIENT_USER}" />
				<!-- <entry key="passwordCallbackClass" value="com.sms.dcp.KeystorePasswordCallback" 
					/> -->
				<entry key="passwordCallbackRef" value-ref="keystoreCallbackHandler" />

				<entry key="signaturePropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="signatureKeyIdentifier" value="DirectReference" />
				<entry key="signatureParts"
					value="{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp;{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body" />
				<!-- What algorithm does VBMS support? -->
				<entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />

				<entry key="encryptionPropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="encryptionUser" value="${SECURITY_SERVICE_USER}" />
				<entry key="encryptionParts"
					value="{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body" />
				<entry key="encryptionSymAlgorithm" value="http://www.w3.org/2001/04/xmlenc#tripledes-cbc" />
				<entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" />

				<!-- <entry key="passwordType" value="PasswordDigest" /> -->
				<!-- <entry key="decryptionPropFile" value="wssecurity/etc/Server_Decrypt.properties"/> -->
				<!-- <entry key="encryptionKeyIdentifier" value="IssuerSerial" /> -->
				<!-- <entry key="action" value="UsernameToken Timestamp Signature Encrypt" 
					/> -->
			</map>
		</constructor-arg>
	</bean>

	<!-- Mockup service beans -->

	<bean id="wss4jInInterceptor-VBMS-mock-service" class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
		<constructor-arg>
			<map>
				<!-- mock service needs to match client action -->
				<entry key="action" value="${SECURITY_CLIENT_ACTION}" />
				<entry key="signaturePropFile"
					value="cms-files/cms-trusted-crypto-service-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="decryptionPropFile"
					value="cms-files/cms-trusted-crypto-service-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" />
				<entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />
				<!-- <entry key="passwordCallbackClass" value="com.sms.dcp.KeystorePasswordCallback" 
					/> -->
				<entry key="passwordCallbackRef" value-ref="keystoreCallbackHandler" />
			</map>
		</constructor-arg>
	</bean>


	<bean id="wss4jInInterceptor-ddc-client-mock" class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
		<constructor-arg>
			<map>
				<!-- match what expcted by ddc service at ESB -->
				<entry key="action" value="${SECURITY_DDC_ACTION}" />
				<entry key="signaturePropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="decryptionPropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" />
				<entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />
				<!-- <entry key="passwordCallbackClass" value="com.sms.dcp.KeystorePasswordCallback" 
					/> -->
				<entry key="passwordCallbackRef" value-ref="keystoreCallbackHandler" />
			</map>
		</constructor-arg>
	</bean>

	<bean id="wss4jOutInterceptor-ddc-client-mock" class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
		<constructor-arg>
			<map>
				<!-- match what expcted by ddc service at ESB -->
				<entry key="action" value="${SECURITY_DDC_ACTION}" />
				<entry key="user" value="${SECURITY_DDC_SIGNATURE_USER}" />
				<!-- <entry key="passwordCallbackClass" value="com.sms.dcp.KeystorePasswordCallback" 
					/> -->
				<entry key="passwordCallbackRef" value-ref="keystoreCallbackHandler" />

				<entry key="signaturePropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="signatureKeyIdentifier" value="DirectReference" />
				<entry key="signatureParts"
					value="{Element}{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Timestamp;{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body" />
				<!-- What algorithm does VBMS support? -->
				<entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1" />

				<entry key="encryptionPropFile"
					value="cms-files/cms-trusted-crypto-client-${SECURITY_RUNTIME_ENV}.properties" />
				<entry key="encryptionUser" value="${SECURITY_DDC_EncryptionUser}" />
				<entry key="encryptionParts"
					value="{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body" />
				<entry key="encryptionSymAlgorithm" value="http://www.w3.org/2001/04/xmlenc#tripledes-cbc" />
				<entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p" />

				<!-- <entry key="passwordType" value="PasswordDigest" /> -->
				<!-- <entry key="decryptionPropFile" value="wssecurity/etc/Server_Decrypt.properties"/> -->
				<!-- <entry key="encryptionKeyIdentifier" value="IssuerSerial" /> -->
				<!-- <entry key="action" value="UsernameToken Timestamp Signature Encrypt" 
					/> -->
			</map>
		</constructor-arg>
	</bean>
	<!-- Mockup service beans end -->

	<cxf:cxfEndpoint id="edocumentVA" address="${VA_URL}"
		endpointName="s:eDocumentServiceSOAP" serviceName="s:eDocumentService"
		wsdlURL="wsdl/2-2/eDocumentService.wsdl" serviceClass="gov.va.vba.vbms.external.edocumentservice.EDocumentService"
		xmlns:s="http://vbms.vba.va.gov/external/eDocumentService/">
		<cxf:properties>
			<!-- enable mtom by setting this property to true -->
			<!-- <entry key="mtom-enabled" value="${MTOM_ENABLED}" /> -->
			<!-- <entry key="dataFormat" value="CXF_MESSAGE" /> -->
			<entry key="dataFormat" value="POJO" />
			<entry key="mustUnderstand" value="false" />
		</cxf:properties>
		<cxf:inInterceptors>
			<!-- <ref bean="loggingInInterceptor" /> -->
			<!-- <ref bean="wss4jInInterceptor-VBMS-client" /> -->
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<ref bean="loggingOutInterceptor" />
			<ref bean="wss4jOutInterceptor-VBMS-client" />
			<!-- <ref bean="cxf-transformOutInterceptor" /> -->
		</cxf:outInterceptors>
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="edocumentVAMock" address="${VA_URL}"
		endpointName="s:eDocumentServiceSOAP" serviceName="s:eDocumentService"
		wsdlURL="wsdl/2-2/eDocumentService.wsdl" serviceClass="gov.va.vba.vbms.external.edocumentservice.EDocumentService"
		xmlns:s="http://vbms.vba.va.gov/external/eDocumentService/">
		<cxf:properties>
			<!-- enable mtom by setting this property to true -->
			<!-- <entry key="mtom-enabled" value="${MTOM_ENABLED}" /> -->
			<!-- <entry key="dataFormat" value="CXF_MESSAGE" /> -->
			<entry key="dataFormat" value="POJO" />
			<entry key="mustUnderstand" value="false" />
		</cxf:properties>
		<cxf:inInterceptors>
			<ref bean="loggingInInterceptor" />
			<ref bean="wss4jInInterceptor-VBMS-mock-service" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<!-- <ref bean="loggingOutInterceptor" /> -->
			<!-- <ref bean="wss4jOutInterceptor-VBMS-mock-service" /> -->
		</cxf:outInterceptors>
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="edocumentDDC" address="${FACILITY_URL}"
		endpointName="s:eDocumentServiceSOAP" serviceName="s:eDocumentService"
		wsdlURL="wsdl/ddc/eDocumentService.wsdl" serviceClass="gov.va.vba.cmp.external.edocumentservice.EDocumentService"
		xmlns:s="http://cmp.vba.va.gov/external/eDocumentService/">
		<cxf:properties>
			<!-- enable mtom by setting this property to true -->
			<entry key="mtom-enabled" value="${MTOM_ENABLED}" />
		</cxf:properties>
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="edocumentDDCClientMock" address="${FACILITY_CLIENT_MOCK_URL}"
		endpointName="s:eDocumentServiceSOAP" serviceName="s:eDocumentService"
		wsdlURL="wsdl/ddc/eDocumentService.wsdl" serviceClass="gov.va.vba.cmp.external.edocumentservice.EDocumentService"
		xmlns:s="http://cmp.vba.va.gov/external/eDocumentService/">
		<cxf:properties>
			<!-- enable mtom by setting this property to true -->
			<!-- <entry key="mtom-enabled" value="${MTOM_ENABLED}" /> -->
		</cxf:properties>
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="edocumentDDCClientSecurityMock"
		address="${FACILITY_URL}" endpointName="s:eDocumentServiceSOAP"
		serviceName="s:eDocumentService" wsdlURL="wsdl/ddc/eDocumentService.wsdl"
		serviceClass="gov.va.vba.cmp.external.edocumentservice.EDocumentService"
		xmlns:s="http://cmp.vba.va.gov/external/eDocumentService/">
		<cxf:properties>
			<!-- enable mtom by setting this property to true -->
			<!-- <entry key="mtom-enabled" value="${MTOM_ENABLED}" /> -->
			<entry key="dataFormat" value="POJO" />
			<entry key="mustUnderstand" value="false" />
			<!-- <entry key="dataFormat" value="CXF_MESSAGE" /> -->
		</cxf:properties>
		<cxf:inInterceptors>
			<ref bean="loggingInInterceptor" />
			<ref bean="wss4jInInterceptor-ddc-client-mock" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<ref bean="loggingOutInterceptor" />
			<ref bean="wss4jOutInterceptor-ddc-client-mock" />
		</cxf:outInterceptors>
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="edocumentDDCWithSecurity" address="${FACILITY_URL}"
		endpointName="s:eDocumentServiceSOAP" serviceName="s:eDocumentService"
		wsdlURL="wsdl/ddc/eDocumentService.wsdl" serviceClass="gov.va.vba.cmp.external.edocumentservice.EDocumentService"
		xmlns:s="http://cmp.vba.va.gov/external/eDocumentService/">
		<cxf:properties>
			<!-- enable mtom by setting this property to true -->
			<!-- <entry key="mtom-enabled" value="${MTOM_ENABLED}" /> -->
			<entry key="dataFormat" value="POJO" />
			<!-- <entry key="dataFormat" value="CXF_MESSAGE" /> -->
		</cxf:properties>
		<cxf:inInterceptors>
			<ref bean="loggingInInterceptor" />
			<ref bean="wss4jInInterceptor-ddc-service" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<ref bean="loggingOutInterceptor" />
			<ref bean="wss4jOutInterceptor-ddc-service" />
		</cxf:outInterceptors>
	</cxf:cxfEndpoint>

	<cxf:cxfEndpoint id="edocumentAlfresco" address="${ALFRESCO_URL}"
		endpointName="s:eDocumentServiceAlfrescoSOAP" serviceName="s:eDocumentServiceAlfresco"
		wsdlURL="wsdl/alfresco/eDocumentServiceAlfresco.wsdl"
		serviceClass="gov.va.vba.cmp.external.edocumentservicealfresco.EDocumentServiceAlfresco"
		xmlns:s="http://cmp.vba.va.gov/external/eDocumentServiceAlfresco/">
		<cxf:properties>
			<!-- <entry key="dataFormat" value="CXF_MESSAGE" /> -->
			<entry key="dataFormat" value="POJO" />
		</cxf:properties>
	</cxf:cxfEndpoint>

	<bean id="myroute" class="com.sms.dcp.MyRouteBuilder" />
	<bean id="alfrescoroute" class="com.sms.dcp.AlfrescoRouteBuilder" />
	<bean id="facilitySoapProxyProcessor" class="com.sms.dcp.FacilitySoapProxyProcessor" />
	<bean id="facilitySoapProxyMessageProcessor" class="com.sms.dcp.FacilitySoapProxyMessageProcessor" />
	<bean id="alfrescoSoapProxyProcessor" class="com.sms.dcp.AlfrescoSoapProxyProcessor" />
	<bean id="alfrescoSoapProxyPOJOProcessor" class="com.sms.dcp.AlfrescoSoapProxyPOJOProcessor" />
	<bean id="alfrescoSoapProxyStringProcessor" class="com.sms.dcp.AlfrescoSoapProxyStringProcessor" />
	<bean id="alfrescoUploadProcessor" class="com.sms.dcp.AlfrescoUploadProcessor">
		<property name="alfrescoURL" value="${Alfresco_URL}" />
		<property name="alfrescoUsername" value="${Alfresco_Username}" />
		<property name="alfrescoPassword" value="${Alfresco_Password}" />
		<property name="alfrescoRepository" value="${Alfresco_Repository}" />
		<property name="alfrescoFolder" value="${Alfresco_Folder}" />
	</bean>

	<camel:camelContext id="smsESB" trace="{{ESB_TRACE_ENABLED}}">
		<camel:propertyPlaceholder id="properties"
			location="file:${karaf.home}/va_esb_proxy/config.properties" />

		<camel:route id="ddcSoapProxy" autoStartup="false">
			<camel:from uri="cxf:bean:edocumentDDC" />
			<camel:to uri="log:ddcSoapProxy" />
			<camel:to uri="bean:facilitySoapProxyProcessor" />
			<camel:to uri="direct:SOAPToAlfresco" />
		</camel:route>

		<camel:route id="ddcSoapProxyWithSecurity" autoStartup="{{SECURITY_ENABLED}}">
			<camel:from uri="cxf:bean:edocumentDDCWithSecurity" />
			<camel:to uri="log:ddcSoapProxy" />
			<camel:to uri="bean:facilitySoapProxyProcessor" />
			<!-- <camel:to uri="bean:facilitySoapProxyMessageProcessor" /> -->
			<camel:to uri="direct:SOAPToAlfresco" />
		</camel:route>

		<camel:route id="fileToAlfrescoDemo">
			<camel:from uri="file://inbox?noop=true" />
			<camel:to uri="direct:alfrescoFile" />
			<!-- <camel:to uri="bean:alfrescoUploadProcessor?method=uploadFile" /> -->
		</camel:route>


		<camel:route id="alfrescoSOAPService">
			<camel:from uri="cxf:bean:edocumentAlfresco" />
			<camel:to uri="log:toVA?level=INFO" />

			<!-- <camel:to uri="bean:alfrescoSoapProxyProcessor" /> -->
			<camel:to uri="bean:alfrescoSoapProxyPOJOProcessor" />
			<camel:to uri="cxf:bean:edocumentVA" />
			<camel:to uri="direct:setOperationSupportHeader" />
			<camel:to uri="direct:contentBasedReply" />

		</camel:route>

		<camel:route id="directFileToAlfresco">
			<camel:from uri="direct:alfrescoFile" />
			<camel:to uri="log:alfresco?showHeaders" />
			<camel:to uri="bean:alfrescoUploadProcessor?method=uploadFile" />
		</camel:route>

		<camel:route id="SOAPToAlfresco">
			<camel:from uri="direct:SOAPToAlfresco" />
			<camel:to uri="log:alfresco?showHeaders" />
			<camel:to uri="bean:alfrescoUploadProcessor?method=uploadSOAPReq" />
			<camel:to uri="direct:setOperationSupportHeader" />
			<camel:to uri="direct:contentBasedReply" />
		</camel:route>

		<camel:route id="directSetBody">
			<camel:from uri="direct:contentBasedReply" />
			<camel:choice>
				<camel:when>
					<camel:simple>${header.soapOperationSupported}</camel:simple>
					<camel:setBody>
						<camel:simple>ok</camel:simple>
					</camel:setBody>
				</camel:when>
				<camel:otherwise>
					<camel:setBody>
						<camel:simple>Operation Not Supported: ${header.operationName}</camel:simple>
					</camel:setBody>
				</camel:otherwise>
			</camel:choice>
		</camel:route>

		<camel:route id="setOperationSupportHeader">
			<camel:from uri="direct:setOperationSupportHeader" />
			<camel:choice>
				<camel:when>
					<camel:simple>${header.operationName} == 'uploadFormDocument'</camel:simple>
					<camel:setHeader headerName="soapOperationSupported">
						<camel:simple resultType="java.lang.Boolean">true</camel:simple>
					</camel:setHeader>
				</camel:when>
				<camel:otherwise>
					<camel:setHeader headerName="soapOperationSupported">
						<camel:simple resultType="java.lang.Boolean">false</camel:simple>
					</camel:setHeader>
				</camel:otherwise>
			</camel:choice>
		</camel:route>

		<!-- mock up service route -->
		<camel:route id="mockVASOAP">
			<camel:from uri="cxf:bean:edocumentVAMock" />
			<camel:to uri="direct:setOperationSupportHeader" />
			<camel:to uri="direct:contentBasedReply" />
		</camel:route>

		<camel:route id="mockDDCClientSOAP">
			<camel:from uri="cxf:bean:edocumentDDCClientMock" />
			<camel:to uri="cxf:bean:edocumentDDCClientSecurityMock" />
		</camel:route>


		<!-- mock up service end -->
	</camel:camelContext>

</beans>